;link:clampValue
; def:    paperCommand
; input:  [dst|color|return
; output: [|
; state: 
; notes:  
@paperCommandImpl:
  SWAP1

  ; clamp color to [0, 100]
  $postPaperCommandClampColor
  SWAP1
  JUMP($clampValue)
  @postPaperCommandClampColor:

  ; [color|dst
  0x0101010101010101010101010101010101010101010101010101010101010101
  MUL($$, $$)

  ; we need to write 101 * 104 = 10504 = 8 + 328*32 bytes
  ; so first smash it into place
  ; then set the cursor to 8 and tick up by 32

  SWAP1           ; [dst|color
  DUP2            ; [color|dst|color
  DUP2            ; [dst|color|dst|color
  MSTORE($$, $$)  ; [dst|color

  ADD(8, $$)      ; [dst'|color
  0               ; [i|dst|color
  @paperCommandWriteLoop:
    DUP3            ; [color|i|dst|color
    DUP3            ; [dst|color|i|dst|color
    ADD(32, $$)     ; [dst+32|color|i|dst|color
    SWAP3           ; [dst|color|i|dst+32|color
    MSTORE($$, $$)  ; [i|dst+32|color

    ADD(1, $$)      ; [i+1|dst+32|color

    ; top of stack is now how many times we've done this
    ; we need 328
    328             ; [328|i+1|dst+32|color
    DUP2            ; [i+1|328|i+1|dst+32|color
    LT($$, $$)      ; [keeplooping|i+1|dst+32|color

    JUMPI($paperCommandWriteLoop, $$)

  POP()
  POP()
  POP()
  JUMP($$)

  