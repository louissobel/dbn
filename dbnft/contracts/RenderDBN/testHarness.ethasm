; Testing ABI
; If calldata is non-empty first byte is function to test
; Rest of data is dependent on that function
ISZERO(CALLDATASIZE)
JUMPI($noTestOpcode, $$)

SHR(0xF8, CALLDATALOAD(0))

JUMPI($testBASE64ENCODE, EQ(0x64, DUP1))
JUMPI($testInitializeBitmap, EQ(0xB1, DUP1))
JUMPI($testLineCommand, EQ(0x1E, DUP1))
JUMPI($testPaperCommand, EQ(0xAE, DUP1))
JUMP($unknownTEST)

@testInitializeBitmap:
  POP() ; clear the test opcode

  $postTestInitializeBitmapCall
  0x40
  JUMP($initializeBitmapImpl)

  @postTestInitializeBitmapCall:

  ; get length on stack
  10962
  JUMP($testStringReturn)

@testLineCommand:
  POP() ; Clear the test opcode

  ; x0, y0, x1, y1, pen, pixelDataOffset, ret

  ; OK, let's create a bitmap first

  $postTestLineCommandInitializeBitmap
  0x40
  JUMP($initializeBitmapImpl)
  @postTestLineCommandInitializeBitmap:
  ; hardcode pixeldataoffset to 0x20
  ;  0x40 + 14 + 40 + 404
  MSTORE(0x20, 0x020a)

  $postTestLineCommandCall
  ; input is interpreted as signed 7 bit integer!

  ; get pen into place
  MSTORE(0x40, SIGNEXTEND(0, SHR(0xF8, CALLDATALOAD(5))))

  SIGNEXTEND(0, SHR(0xF8, CALLDATALOAD(1))) ;x0
  SIGNEXTEND(0, SHR(0xF8, CALLDATALOAD(4))) ;y1
  SIGNEXTEND(0, SHR(0xF8, CALLDATALOAD(3))) ;x1
  SIGNEXTEND(0, SHR(0xF8, CALLDATALOAD(2))) ;y0

  JUMP($lineCommand)
  @postTestLineCommandCall:

  10962 ; bitmap length
  JUMP($testStringReturn)

@testPaperCommand:
  POP() ; Clear the test opcode

  ; color, pixelDataOffset, ret

  ; OK, let's create a bitmap first

  $postTestPaperCommandInitializeBitmap
  0x40
  JUMP($initializeBitmapImpl)
  @postTestPaperCommandInitializeBitmap:
  ; hardcode pixeldataoffset at 0x20
  ;  0x40 + 14 + 40 + 404
  MSTORE(0x20, 0x020a)

  $postTestPaperCommandCall
  ; input is interpreted as signed 7 bit integer!
  SIGNEXTEND(0, SHR(0xF8, CALLDATALOAD(1))) ;color
  JUMP($paperCommand)
  @postTestPaperCommandCall:

  10962 ; bitmap length
  JUMP($testStringReturn)

@testBASE64ENCODE:
  POP() ; clear the test opcode
  ; Pull in CALLDATA[1:]

  SUB(CALLDATASIZE, 0x01)
  DUP1
  CALLDATACOPY(0x0100, 0x01, $$)

  $testStringReturn
  SWAP1
  0x40
  SWAP1
  0x0100
  JUMP($BASE64ENCODE)

@testStringReturn:
  ; assumes return string at 0x40
  ; string length on top of stack
  ; sets up the ABI string return
  DUP1
  MSTORE(0x20, $$)
  MSTORE(0x00, 0x20)

  0x5F ; two bytes prefix, one more for rounding, then -1
  ADD($$, $$)

  ; "divide" by 32, then multiply by 32
  SHR(0x05, $$)
  SHL(0x05, $$)
  RETURN(0, $$)

@noTestOpcode:
  0x4e4f2043414c4c4441544120544f2054455354204841524e4553530000000000
  MSTORE(0x40, $$)
  MSTORE(0x20, 0x1B)
  MSTORE(0x00, 0x20)
  RETURN(0, 0x60)

@unknownTEST:
  SHL(0x50, $$)
  0x554e4b4e4f574e2054455354204f50434f44453a200000000000000000000000
  OR($$, $$)
  MSTORE(0x40, $$)
  MSTORE(0x20, 0x16)
  MSTORE(0x00, 0x20)
  RETURN(0, 0x60)
