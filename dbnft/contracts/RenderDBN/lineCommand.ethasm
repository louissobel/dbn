; def:    lineCommand
; input:  [x1|y1|y0|x0|ret
; output: [|
; state:  assumes pixelDataOffset is at 0x20 (delegated assumption from Set)
;         assumes pen color at 0x40
;         assumes 8 words of scratch memory at 0x80
; notes:  the weird argument layout is so we can easily swap a word to bottom of stack
@lineCommand:
  0x80   ; [pixelListDst|x1|y1|y0|x0
  SWAP3  ; [y0|x1|y1|pixelListDst|x0
  $postLinePixelsCall ; [ret|y0|x1|y1|pixelListDst|x0
  SWAP5               ; [x0|y0|x1|y1|pixelListDst|ret
  JUMP($linePixels)
  @postLinePixelsCall:

  ; load pixel data base
  MLOAD(0x20)


  ; get and clamp pen
  $postLineCommandClampColor
  MLOAD(0x40)
  JUMP($clampValue)
  @postLineCommandClampColor:

  ; [pen|pixelDataBase

  ; now copy in from the pixellist to the bitmap
  SHR(0xf8, MLOAD(0x80)) ; [pixelCount|pen|pixelDataBase
  0x81                   ; [listBase|pixelCount|pen|pixelDataBase
  0                      ; [i|listBase|pixelCount|pen|pixelDataBase
  JUMP($lineCommandPixelCopyTest)


  @lineCommandPixelCopyLoop:
    ; [i (guranteed < pixelcount)|listBase|pixelCount|pen|pixelDataBase
    DUP1       ; [i|i|listBase|pixelCount|pen|pixelDataBase
    SHL(1, $$) ; [i * 2|i|listBase|pixelCount|pen|pixelDataBase
    DUP3       ; [listBase|i * 2|i|listBase|PixelCount|pen|pixelDataBase
    ADD($$, $$); [thisPixel|i|listBase|pixelCount|pen|pixelDataBase
    SHR(0xF0, MLOAD($$)) ; [yx|i|listBase|pixelCount|pen|pixelDataBase
    DUP1          ; [yx|yx|i|listBase|pixelCount|pen|pixelDataBase
    AND(0xFF, $$) ; [x|yx|i|listBase|pixelCount|pen|pixelDataBase
    SWAP1         ; [yx|x|i|listBase|pixelCount|pen|pixelDataBase
    SHR(8, $$)    ; [y|x|i|listBase|pixelCount|pen|pixelDataBase
    MUL(104, $$)  ; [y*104|x|i|listBase|pixelCount|pen|pixelDataBase
    ADD($$, $$)   ; [y*104+x|i|listBase|pixelCount|pen|pixelDataBase
    DUP6          ; [pixelDataBase|y*104+x|i|listBase|pixelCount|pen|pixelDataBase
    ADD($$, $$)   ; [loc|i|listBase|pixelCount|pen|pixelDataBase
    DUP5          ; [pen|loc|i|listBase|pixelCount|pen|pixelDataBase
    SWAP1
    MSTORE8($$, $$)

    ADD(1, $$) ; increment i

  @lineCommandPixelCopyTest:
    ; [i|listBase|pixelCount
    DUP3
    DUP2
    LT($$, $$)
    JUMPI($lineCommandPixelCopyLoop, $$)


    POP()
    POP()
    POP()
    POP()
    POP()
    JUMP($$)

