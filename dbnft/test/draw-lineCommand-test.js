const { expect } = require("chai");
const { ethers } = require("hardhat");

const fs = require('fs')
const VM = require('@ethereumjs/vm').default
const { BN } = require('ethereumjs-util')

describe("Draw#lineCommand", function () {
  const cases = [

    /*** First, around the clock cases ***/    

    // horizontal (3 o clock)
    [
      [20, 50, 25, 50, 100],
      [[20, 50, 100], [21, 50, 100], [22, 50, 100], [23, 50, 100], [24, 50, 100], [25, 50, 100]],
    ],

    // four lines in the first octant
    [
      [20, 50, 25, 51, 100],
      [[20, 50, 100], [21, 50, 100], [22, 50, 100], [23, 51, 100], [24, 51, 100], [25, 51, 100]],
    ],

    [
      [20, 50, 25, 52, 100],
      [[20, 50, 100], [21, 50, 100], [22, 51, 100], [23, 51, 100], [24, 52, 100], [25, 52, 100]],
    ],

    [
      [20, 50, 25, 53, 100],
      [[20, 50, 100], [21, 51, 100], [22, 51, 100], [23, 52, 100], [24, 52, 100], [25, 53, 100]],
    ],

    [
      [20, 50, 25, 54, 100],
      [[20, 50, 100], [21, 51, 100], [22, 52, 100], [23, 52, 100], [24, 53, 100], [25, 54, 100]],
    ],

    // 45째 up and to the right 
    [
      [20, 50, 25, 55, 100],
      [[20, 50, 100], [21, 51, 100], [22, 52, 100], [23, 53, 100], [24, 54, 100], [25, 55, 100]],
    ],

    // next octant (1 oclock)
    [
      [20, 50, 22, 55, 100],
      [[20, 50, 100], [20, 51, 100], [21, 52, 100], [21, 53, 100], [22, 54, 100], [22, 55, 100]]
    ],

    // vertical (12 oclock)
    [
      [20, 50, 20, 55, 100],
      [[20, 50, 100], [20, 51, 100], [20, 52, 100], [20, 53, 100], [20, 54, 100], [20, 55, 100]]
    ],

    // next octant (11 olock)
    [
      [20, 50, 17, 55, 100],
      [[17, 55, 100], [18, 53, 100], [18, 54, 100], [19, 51, 100], [19, 52, 100], [20, 50, 100]]
    ],

    // (45째 up and to the left)
    [
      [20, 50, 15, 55, 100],
      [[15, 55, 100], [16, 54, 100], [17, 53, 100], [18, 52, 100], [19, 51, 100], [20, 50, 100]]
    ],

    // next octant (10 oclock)
    [
      [20, 50, 15, 52, 100],
      [[15, 52, 100], [16, 52, 100], [17, 51, 100], [18, 51, 100], [19, 50, 100], [20, 50, 100]]
    ],

    // horizontal (9 oclock)
    [
      [20, 50, 15, 50, 100],
      [[15, 50, 100], [16, 50, 100], [17, 50, 100], [18, 50, 100], [19, 50, 100], [20, 50, 100]]
    ],

    // next octant (8 oclock)
    [
      [20, 50, 15, 49, 100],
      [[15, 49, 100], [16, 49, 100], [17, 49, 100], [18, 50, 100], [19, 50, 100], [20, 50, 100]]
    ],

    // 45째 down and to the left
    [
      [20, 50, 15, 45, 100],
      [[15, 45, 100], [16, 46, 100], [17, 47, 100], [18, 48, 100], [19, 49, 100], [20, 50, 100]]
    ],

    // next octant (7 o'clock)
    [
      [20, 50, 18, 45, 100],
      [[18, 45, 100], [18, 46, 100], [19, 47, 100], [19, 48, 100], [20, 49, 100], [20, 50, 100]]
    ],

    // straight down (6 oclock)
    [
      [20, 50, 20, 45, 100],
      [[20, 45, 100], [20, 46, 100], [20, 47, 100], [20, 48, 100], [20, 49, 100], [20, 50, 100]]
    ],

    // next octant (5 oclock)
    [
      [20, 50, 22, 45, 100],
      [[20, 49, 100], [20, 50, 100], [21, 47, 100], [21, 48, 100], [22, 45, 100], [22, 46, 100]]
    ],

    // 45째 down and to the right
    [
      [20, 50, 25, 45, 100],
      [[20, 50, 100], [21, 49, 100], [22, 48, 100], [23, 47, 100], [24, 46, 100], [25, 45, 100]]
    ],

    // next octant (4 oclock)
    [
      [20, 50, 25, 49, 100],
      [[20, 50, 100], [21, 50, 100], [22, 50, 100], [23, 49, 100], [24, 49, 100], [25, 49, 100]]
    ],



    // Single dot
    [
      [10, 40, 10, 40, 100],
      [[10, 40, 100]],
    ],


    // different pen
    [
      [10, 40, 11, 40, 3],
      [[10, 40, 3], [11, 40, 3]],
    ],

    // boundary, whole page
    [
      [0, 0, 100, 100, 100],
      [[0, 0, 100], [1, 1, 100], [2, 2, 100], [3, 3, 100], [4, 4, 100], [5, 5, 100], [6, 6, 100], [7, 7, 100], [8, 8, 100], [9, 9, 100], [10, 10, 100], [11, 11, 100], [12, 12, 100], [13, 13, 100], [14, 14, 100], [15, 15, 100], [16, 16, 100], [17, 17, 100], [18, 18, 100], [19, 19, 100], [20, 20, 100], [21, 21, 100], [22, 22, 100], [23, 23, 100], [24, 24, 100], [25, 25, 100], [26, 26, 100], [27, 27, 100], [28, 28, 100], [29, 29, 100], [30, 30, 100], [31, 31, 100], [32, 32, 100], [33, 33, 100], [34, 34, 100], [35, 35, 100], [36, 36, 100], [37, 37, 100], [38, 38, 100], [39, 39, 100], [40, 40, 100], [41, 41, 100], [42, 42, 100], [43, 43, 100], [44, 44, 100], [45, 45, 100], [46, 46, 100], [47, 47, 100], [48, 48, 100], [49, 49, 100], [50, 50, 100], [51, 51, 100], [52, 52, 100], [53, 53, 100], [54, 54, 100], [55, 55, 100], [56, 56, 100], [57, 57, 100], [58, 58, 100], [59, 59, 100], [60, 60, 100], [61, 61, 100], [62, 62, 100], [63, 63, 100], [64, 64, 100], [65, 65, 100], [66, 66, 100], [67, 67, 100], [68, 68, 100], [69, 69, 100], [70, 70, 100], [71, 71, 100], [72, 72, 100], [73, 73, 100], [74, 74, 100], [75, 75, 100], [76, 76, 100], [77, 77, 100], [78, 78, 100], [79, 79, 100], [80, 80, 100], [81, 81, 100], [82, 82, 100], [83, 83, 100], [84, 84, 100], [85, 85, 100], [86, 86, 100], [87, 87, 100], [88, 88, 100], [89, 89, 100], [90, 90, 100], [91, 91, 100], [92, 92, 100], [93, 93, 100], [94, 94, 100], [95, 95, 100], [96, 96, 100], [97, 97, 100], [98, 98, 100], [99, 99, 100], [100, 100, 100]],
    ],

    // pen clip
    [
      [50, 50, 50, 50, -10],
      [], // empty array because we don't see this as a drawn pixel if it is correctly clipped to zero!
    ],
    [
      [50, 50, 50, 50, 120],
      [[50, 50, 100]],
    ],

    // x y clipping
    // since this test looks at the raw returned pixel data, I can't check
    // in this test for non-clobbering of other data :/
    // but it can check that the clipping logic doesn't break out of range lines
    [
      [-1, -3, 1, 2, 100],
      [[0, 0, 100], [1, 1, 100], [1, 2, 100]],
    ],
    [
      [1, 2, -1, -3, 100],
      [[0, 0, 100], [1, 1, 100], [1, 2, 100]],
    ],
    [
      [98, 98, 102, 108, 100],
      [[98, 98, 100], [98, 99, 100], [99, 100, 100]],
    ],
    [
      [102, 108, 98, 98, 100],
      [[98, 98, 100], [98, 99, 100], [99, 100, 100]],
    ],
    [
      [-5, -3, -1, -2, 100],
      [],
    ],

  ]

  cases.forEach(function([ [x0, y0, x1, y1, pen], output ]) {
    it(`Should correctly draw line ${[x0, y0, x1, y1, pen]}`, async function () {
      const contract = fs.readFileSync('artifacts/contracts/RenderDBNTestArtifact.eth')
      const vm = new VM()

      const data = Buffer.from([0x1E, x0, y0, x1, y1, pen])
      const runOpts = {
        code: contract,
        gasLimit: new BN(0xffffffff),
        data: data,
      }
      const result = await vm.runCode(runOpts)

      if (result.exceptionError) {
        throw new Error("failure: " + result.exceptionError.error)
      }

      const raw = "0x" + result.returnValue.toString('hex')
      const coder = new ethers.utils.AbiCoder()
      const value = coder.decode(["bytes"], raw)[0]
      const bitmapBuffer = Buffer.from(value.slice(2), 'hex')
      // 14 + 40 + 404 is offset to pixel data

      const pixelData = bitmapBuffer.slice(14 + 40 + 404)
      const setPixels = []
      for (var x = 0; x<101; x++) {
        for (var y = 0; y<101; y++) {
          var pixel =  pixelData[y*104 + x]
          if (pixel > 0) {
            setPixels.push([x, y, pixel])
          }
        }
      }

      expect(setPixels).to.eql(output)
    });
  })
});
